{"version":3,"sources":["utils/index.js","cons.js","components/Contract/index.js","components/CrowdFunding/index.js","components/Datos/index.js","components/Oficina/index.js","components/TronLinkInfo/index.js","components/TronLinkGuide/index.js","components/App/index.js","index.js","components/TronLinkGuide/TronLinkLogo.png"],"names":["utils","tronWeb","contract","setTronWeb","this","setContract","contractAddress","at","EarnTron","Component","constructor","props","super","state","min","deposit","bind","estado","componentDidMount","Utils","window","setInterval","setState","tarifa","amount","document","getElementById","value","parseFloat","trx","getBalance","balanceInSun","balanceInTRX","fromSun","console","log","loc","location","href","indexOf","getString","split","GET","get","i","l","length","tmp","unescape","decodeURI","investors","call","inversors","registered","cons","sponsor","getAccount","account","accountAddress","address","fromHex","send","shouldPollResponse","callValue","alert","render","className","type","id","placeholder","onClick","totalInvestors","totalInvested","totalRefRewards","setstate","esto","parseInt","Investors","_hex","Invested","RefRewards","direccion","link","balanceRef","totalRef","invested","paidAt","my","withdrawn","Link","withdraw","mydireccion","MYwithdrawable","My","cosa","available","toFixed","style","text","TronLinkInfo","accountBalance","accountBandwidth","fetchAccountAddress","fetchAccountBalance","fetchAccountBandwidth","accountAddressInBase58","getBandwidth","WEBSTORE_URL","logo","src","TronLinkLogo","alt","openTronLink","open","TronLinkGuide","installed","target","rel","FOUNDATION_ADDRESS","App","loggedIn","Promise","resolve","tronWebState","ready","tries","timer","TRONGRID_API","TronWeb","clearInterval","defaultAddress","hex","toHex","base58","on","root","ReactDOM","module","exports"],"mappings":"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","file":"static/js/main.2775ef3c.chunk.js","sourcesContent":["const utils = {\n  tronWeb: false,\n  contract: false,\n\n  setTronWeb(tronWeb) {\n    this.tronWeb = tronWeb;\n  },\n\n  async setContract(tronWeb, contractAddress) {\n    this.contract = await tronWeb.contract().at(contractAddress);\n  }\n};\n\nexport default utils;\n","const proxy = \"https://proxy-ewozx.herokuapp.com/\";\nconst PRU = \"shasta.\";// shasta1. para inhabilitar red de pruebas\n\nconst WS = \"T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb\";//T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb recibe los huerfanos por defecto\n\nconst SC = \"TV1R4Vqw3eiabXfaYB42YAeadXYSzXwcwt\";// direccion del contrato\n\nexport default {proxy, PRU, WS,  SC};\n","import cons from \"../../cons.js\";\n/// La direccion de su contrato acá ///////////////////////////////////\nconst contractAddress = cons.SC;\n\nexport default contractAddress;","import React, { Component } from \"react\";\nimport Utils from \"../../utils\";\nimport contractAddress from \"../Contract\";\n\nimport cons from \"../../cons.js\";\n\nexport default class EarnTron extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n\n      min: 200\n\n\n    };\n\n    this.deposit = this.deposit.bind(this);\n    this.estado = this.estado.bind(this);\n  }\n\n  async componentDidMount() {\n    await Utils.setContract(window.tronWeb, contractAddress);\n    this.estado();\n    setInterval(() => this.estado(),3*1000);\n  };\n\n  async estado(){\n\n\n    var min = 200;\n\n\n    this.setState({\n      min: min,\n      tarifa: 5\n    });\n\n    //console.log(min);\n\n\n\n  }\n\n\n  async deposit() {\n\n\n    const { min } = this.state;\n\n\n    var amount = document.getElementById(\"amount\").value;\n    amount = parseFloat(amount);\n\n    const balanceInSun = await window.tronWeb.trx.getBalance(); //number\n    var balanceInTRX = window.tronWeb.fromSun(balanceInSun); //string\n    balanceInTRX = parseFloat(balanceInTRX);//number\n\n    console.log(balanceInTRX);\n    console.log(amount);\n\n    if ( balanceInTRX-50 >= amount ){\n\n        var loc = document.location.href;\n        if(loc.indexOf('?')>0){\n            var getString = loc.split('?')[1];\n            var GET = getString.split('&');\n            var get = {};\n            for(var i = 0, l = GET.length; i < l; i++){\n                var tmp = GET[i].split('=');\n                get[tmp[0]] = unescape(decodeURI(tmp[1]));\n            }\n\n            if (get['ref']) {\n              tmp = get['ref'].split('#');\n\n              var inversors = await Utils.contract.investors(tmp[0]).call();\n\n              console.log(inversors);\n\n              if ( inversors.registered ) {\n                document.getElementById('sponsor').value = tmp[0];\n              }else{\n                document.getElementById('sponsor').value = cons.WS;\n              }\n            }else{\n               document.getElementById('sponsor').value = cons.WS;\n            }\n\n        }else{\n\n            document.getElementById('sponsor').value = cons.WS;\n        }\n\n        var sponsor = document.getElementById(\"sponsor\").value;\n\n        const account =  await window.tronWeb.trx.getAccount();\n        var accountAddress = account.address;\n        accountAddress = window.tronWeb.address.fromHex(accountAddress);\n\n        var investors = await Utils.contract.investors(accountAddress).call();\n\n        if (investors.registered) {\n\n          sponsor = investors.sponsor;\n\n        }\n\n\n        if ( amount >= min){\n\n          document.getElementById(\"amount\").value = \"\";\n\n          await Utils.contract.deposit(sponsor).send({\n            shouldPollResponse: true,\n            callValue: amount * 1000000 // converted to SUN\n          });\n\n        }else{\n          window.alert(\"Please enter an amount greater than 200 TRX\");\n          document.getElementById(\"amount\").value = 200;\n        }\n\n\n\n    }else{\n\n      if (amount > 200 && balanceInTRX > 250) {\n\n        if ( amount > balanceInTRX) {\n          if (balanceInTRX-50 <= 0) {\n            document.getElementById(\"amount\").value = 0;\n            window.alert(\"You do not have enough funds in your account you place at least 250 TRX\");\n          }else{\n            document.getElementById(\"amount\").value = balanceInTRX-50;\n            window.alert(\"You must leave 50 TRX free in your account to make the transaction\");\n          }\n\n\n\n        }else{\n\n          document.getElementById(\"amount\").value = amount-50;\n          window.alert(\"You must leave 50 TRX free in your account to make the transaction\");\n\n        }\n      }else{\n        window.alert(\"You do not have enough funds in your account you place at least 250 TRX\");\n      }\n    }\n\n  };\n\n\n  render() {\n\n    var { min, tarifa } = this.state;\n\n    min = \"Min. \"+min+\" TRX\";\n\n    switch (tarifa)\n        {\n            case 0:  tarifa = 2;\n                     break;\n            case 1:  tarifa = 3;\n                     break;\n            case 2:  tarifa = 4;\n                     break;\n            case 3:  tarifa = 5;\n                     break;\n            case 4:  tarifa = 6;\n                     break;\n\n            default: tarifa = \"N/A\";\n                     break;\n        }\n\n\n\n\n\n    return (\n\n\n        <div>\n          <h6 className=\"text-center\">\n            Return: <strong>200%</strong><br />\n          </h6>\n\n          <div className=\"form-group text-center\">\n            <input type=\"number\" className=\"form-control mb-20 text-center\" id=\"amount\" placeholder={min}></input>\n            <p className=\"card-text\">You must have ~ 50 TRX to make the transaction</p>\n\n            <a href=\"#amount\" className=\"gradient-btn v2\" onClick={() => this.deposit()}>Deposit</a>\n\n\n\n\n          </div>\n\n        </div>\n\n\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Utils from \"../../utils\";\nimport contractAddress from \"../Contract\";\n\nexport default class EarnTron extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      totalInvestors: 0,\n      totalInvested: 0,\n      totalRefRewards: 0\n    };\n\n    this.totalInvestors = this.totalInvestors.bind(this);\n  }\n\n  async componentDidMount() {\n    await Utils.setContract(window.tronWeb, contractAddress);\n    setInterval(() => this.totalInvestors(),1000);\n  };\n\n  async totalInvestors() {\n\n    let esto = await Utils.contract.setstate().call();\n    //console.log(esto);\n    this.setState({\n      totalInvestors: parseInt(esto.Investors._hex),\n      totalInvested: parseInt(esto.Invested._hex)/1000000,\n      totalRefRewards: parseInt(esto.RefRewards._hex)/1000000\n\n    });\n\n  };\n\n  render() {\n    const { totalInvestors, totalInvested, totalRefRewards } = this.state;\n\n    return (\n      <section id=\"stats\" className=\"section-gap aboutus-area\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-lg-4 single-services\">\n              <h1 className=\"pt-40 pb-30 text-white\">{totalInvestors}</h1>\n              <p>\n                Global Investors\n              </p>\n            </div>\n            <div className=\"col-lg-4 single-services\">\n              \n              <h1 className=\"pt-40 pb-30 text-white\">{totalInvested} TRX</h1>\n              <p>\n                Global Inverted\n              </p>\n            </div>\n            <div className=\"col-lg-4 single-services\">\n              <h1 className=\"pt-40 pb-30 text-white\">{totalRefRewards} TRX</h1>\n              <p>\n                Global Referral Rewards\n              </p>\n            </div>                        \n          </div>\n        </div>    \n      </section>\n\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport Utils from \"../../utils\";\nimport contractAddress from \"../Contract\";\n\nexport default class EarnTron extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      direccion: \"\",\n      link: \"Haz una inversión para obtener el LINK de referido\",\n      registered: false,\n      balanceRef: 0,\n      totalRef: 0,\n      invested: 0,\n      paidAt: 0,\n      my: 0,\n      withdrawn: 0\n\n    };\n\n    this.Investors = this.Investors.bind(this);\n    this.Link = this.Link.bind(this);\n    this.withdraw = this.withdraw.bind(this);\n  }\n\n  async componentDidMount() {\n    await Utils.setContract(window.tronWeb, contractAddress);\n    setInterval(() => this.Investors(),300);\n    setInterval(() => this.Link(),1000);\n  };\n\n  async Link() {\n    const {registered} = this.state;\n    if(registered){\n\n      let loc = document.location.href;\n      if(loc.indexOf('?')>0){\n        loc = loc.split('?')[0]\n      }\n      let mydireccion = await window.tronWeb.trx.getAccount();\n      mydireccion = window.tronWeb.address.fromHex(mydireccion.address)\n      mydireccion = loc+'?ref='+mydireccion;\n      this.setState({\n        link: mydireccion,\n      });\n    }else{\n      this.setState({\n        link: \"Haz una inversión para obtener el LINK de referido\",\n      });\n    }\n  }\n\n\n  async Investors() {\n\n    let direccion = await window.tronWeb.trx.getAccount();\n    let esto = await Utils.contract.investors(direccion.address).call();\n    let My = await Utils.contract.MYwithdrawable().call();\n    //console.log(esto);\n    //console.log(My);\n    this.setState({\n      direccion: window.tronWeb.address.fromHex(direccion.address),\n      registered: esto.registered,\n      balanceRef: parseInt(esto.balanceRef._hex)/1000000,\n      totalRef: parseInt(esto.totalRef._hex)/1000000,\n      invested: parseInt(esto.invested._hex)/1000000,\n      paidAt: parseInt(esto.paidAt._hex)/1000000,\n      my: parseInt(My.amount._hex)/1000000,\n      withdrawn: parseInt(esto.withdrawn._hex)/1000000\n    });\n\n  };\n\n  async withdraw(){\n    var cosa = await Utils.contract.withdraw().send();\n    console.log(cosa);\n  };\n\n\n  render() {\n    var { balanceRef, totalRef, invested,  withdrawn , my, direccion, link} = this.state;\n\n    var available = (balanceRef+my);\n    available = available.toFixed(6);\n    available = parseFloat(available);\n\n    balanceRef = balanceRef.toFixed(6);\n    balanceRef = parseFloat(balanceRef);\n\n    totalRef = totalRef.toFixed(6);\n    totalRef = parseFloat(totalRef);\n\n    invested = invested.toFixed(6);\n    invested = parseFloat(invested);\n\n    withdrawn = withdrawn.toFixed(6);\n    withdrawn = parseFloat(withdrawn);\n\n    my = my.toFixed(6);\n    my = parseFloat(my);\n\n    return (\n\n      <section  id=\"office\" className=\"simple-services-area section-gap\">\n        <div className=\"container text-center\">\n          <header className=\"section-header\">\n            <h3 className=\"white\"><span style={{'fontweight': 'bold'}}>\n              My office:</span>\n            </h3>\n            <p>{direccion}</p><br />\n            <h3 className=\"white\" >Referral link:</h3>\n            <h6 className=\"aboutus-area\" style={{'padding': '1.5em', 'fontSize': '11px'}}><a href={link}>{link}</a><br /><br />\n            <CopyToClipboard text={link}>\n              <button type=\"button\" style={{'cursor': 'pointer'}} className=\"btn btn-primary\">Copy to clipboard</button>\n            </CopyToClipboard>\n            </h6>\n            <hr></hr>\n\n          </header>\n\n          <div className=\"row\">\n            <div className=\"col-sm-4 single-services\">\n              <h4 className=\"pt-30 pb-20\">{invested} TRX</h4>\n              <p>\n                Total invested\n              </p>\n            </div>\n\n            <div className=\"col-sm-4 single-services\">\n              <h4 className=\"pt-30 pb-20\">{totalRef} TRX</h4>\n              <p>\n                Total earnings from referrals\n\n              </p>\n            </div>\n\n            <div className=\"col-sm-4 single-services\">\n              <h4 className=\"pt-30 pb-20\">{my} TRX</h4>\n              <p>\n                My Profits\n              </p>\n            </div>\n\n            <div className=\"col-sm-4 single-services\">\n              <h4 className=\"pt-30 pb-20\">{available} TRX</h4>\n              <p>\n                Available\n              </p>\n              <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.withdraw()}>Withdrawal</button>\n            </div>\n\n            <div className=\"col-sm-4 single-services\">\n              <h4 className=\"pt-30 pb-20\">{withdrawn} TRX</h4>\n              <p>\n                withdrawn\n\n              </p>\n            </div>\n\n          </div>\n        </div>\n      </section>\n\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class TronLinkInfo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      accountAddress: \"Billetera NO conectada\",\n      accountBalance: \"Billetera NO conectada\",\n      accountBandwidth: \"Billetera NO conectada\"\n    };\n  };\n\n  \n  componentDidMount() {\n    setInterval(() => this.fetchAccountAddress(),1000);\n    setInterval(() => this.fetchAccountBalance(),1000);\n    setInterval(() => this.fetchAccountBandwidth(),1000);\n  };\n\n\n  async fetchAccountAddress() {\n    const account =  await window.tronWeb.trx.getAccount();\n    const accountAddress = account.address;\n    const accountAddressInBase58 = window.tronWeb.address.fromHex(\n      accountAddress\n    );\n\n    this.setState({\n      accountAddress: accountAddressInBase58\n    });\n  };\n\n  async fetchAccountBalance() {\n    const balanceInSun = await window.tronWeb.trx.getBalance(); //number\n    const balanceInTRX = window.tronWeb.fromSun(balanceInSun); //string\n    //const changeBackToSun = window.tronWeb.toSun(balanceInTRX); //string\n\n    this.setState({\n      //accountBalance: balanceInSun // Muestra el balance en SUN\n      accountBalance: balanceInTRX\n    });\n  };\n  //\n  // // La funcion aqui abajo muestra el ancho de banda como un numero\n  async fetchAccountBandwidth() {\n    const accountBandwidth = await window.tronWeb.trx.getBandwidth(); // number\n\n    this.setState({\n      accountBandwidth: accountBandwidth\n    });\n  };\n\n\n  render() {\n    const { accountAddress, accountBalance, accountBandwidth} = this.state;\n    return (\n\n\n          <div>\n            <h5 className=\"text-center\">Connected Wallet</h5>\n            <h6 className=\"text-center\">\n              Address:<br></br>\n               <strong><span style={{'fontSize': '11px'}}>{accountAddress}</span></strong><br></br><br></br>\n              Balance:<br></br>\n               <strong><span>{accountBalance} TRX</span></strong><br></br><br></br>\n              Bandwidth:<br></br>\n               <strong><span>{accountBandwidth}</span></strong><br></br>\n              \n            </h6>\n          </div>\n\n    \n    );\n  };\n}\n","import React from 'react';\n\nimport TronLinkLogo from './TronLinkLogo.png';\n\n\nconst WEBSTORE_URL = 'https://chrome.google.com/webstore/detail/ibnejdfjmmkpcnlpebklmnkoeoihofec/';\n\nconst logo = (\n    <div className='col-sm-4 text-center'>\n        <img src={ TronLinkLogo } className=\"img-fluid\" alt='TronLink logo' />\n    </div>\n);\n\nconst openTronLink = () => {\n    window.open(WEBSTORE_URL, '_blank');\n};\n\nconst TronLinkGuide = props => {\n    const {\n        installed = false\n    } = props;\n\n    if(!installed) {\n        return (\n            <div className='row' onClick={ openTronLink }>\n                <div className='col-sm-8'>\n                    <h1>TronLink Required</h1>\n                    <p>\n                        To create a post or tip others you must install TronLink. TronLink is a TRON wallet for the browser\n                        that can be <a href={ WEBSTORE_URL } target='_blank' rel='noopener noreferrer'>installed from the Chrome Webstore</a>.\n                        Once installed, return back and refresh the page.\n                    </p>\n                </div>\n                { logo }\n            </div>\n        );\n    }\n\n    return (\n    <>\n        <div className='tronLink row' onClick={ openTronLink } style={{'padding': '3em'}}>\n\n            <div className='info col-sm-8'>\n                <h1>Log in Required</h1>\n                <p>\n                    TronLink is installed but you must first log in. Open TronLink from the browser bar and set up your\n                    first wallet or decrypt a previously created wallet.\n                </p>\n            </div>\n            { logo }\n        </div> \n\n    </>\n    );\n};\n\nexport default TronLinkGuide;","import React, { Component } from \"react\";\nimport TronWeb from \"tronweb\";\n\nimport Utils from \"../../utils\";\nimport CrowdFunding from \"../CrowdFunding\";\nimport Datos from \"../Datos\";\nimport Oficina from \"../Oficina\";\nimport TronLinkInfo from \"../TronLinkInfo\";\nimport TronLinkGuide from \"../TronLinkGuide\";\n\n\nconst FOUNDATION_ADDRESS = \"TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tronWeb: {\n        installed: false,\n        loggedIn: false\n      }\n    };\n  }\n\n  async componentDidMount() {\n    await new Promise(resolve => {\n      const tronWebState = {\n        installed: !!window.tronWeb,\n        loggedIn: window.tronWeb && window.tronWeb.ready\n      };\n\n      if (tronWebState.installed) {\n        this.setState({\n          tronWeb: tronWebState\n        });\n\n        return resolve();\n      }\n\n      let tries = 0;\n\n      const timer = setInterval(() => {\n        if (tries >= 10) {\n\n          const TRONGRID_API = \"https://api.trongrid.io\";\n\n          window.tronWeb = new TronWeb(\n            TRONGRID_API,\n            TRONGRID_API,\n            TRONGRID_API\n          );\n\n          this.setState({\n            tronWeb: {\n              installed: false,\n              loggedIn: false\n            }\n          });\n          clearInterval(timer);\n          return resolve();\n        }\n\n        tronWebState.installed = !!window.tronWeb;\n        tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n\n        if (!tronWebState.installed) {\n          return tries++;\n        }\n\n        this.setState({\n          tronWeb: tronWebState\n        });\n\n        resolve();\n      }, 100);\n    });\n\n    if (!this.state.tronWeb.loggedIn) {\n      // Set default address (foundation address) used for contract calls\n      // Directly overwrites the address object if TronLink disabled the\n      // function call\n      window.tronWeb.defaultAddress = {\n        hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n        base58: FOUNDATION_ADDRESS\n      };\n\n      window.tronWeb.on(\"addressChange\", () => {\n        if (this.state.tronWeb.loggedIn) {\n          return;\n        }\n\n        this.setState({\n          tronWeb: {\n            installed: true,\n            loggedIn: true\n          }\n        });\n      });\n    }\n\n    Utils.setTronWeb(window.tronWeb);\n  }\n\n  render() {\n    if (!this.state.tronWeb.installed) return (\n      <>\n        <div className=\"container\">\n          <TronLinkGuide />\n        </div>\n      </>\n      );\n\n    if (!this.state.tronWeb.loggedIn) return (\n      <>\n        <div className=\"container\">\n          <TronLinkGuide installed />\n        </div>\n      </>\n      );\n\n    return (\n\n      <>\n\n      <section className=\"convert-area\" id=\"convert\">\n        <div className=\"container\">\n          <div className=\"convert-wrap\">\n            <div className=\"row justify-content-center align-items-center flex-column pb-30\">\n              <h1 className=\"text-white\">Make your investment</h1>           \n            </div>\n            <div className=\"row justify-content-center align-items-start\">\n\n              <div className=\"col-lg-6 cols\">\n                <CrowdFunding />\n              </div>\n\n              <div className=\"col-lg-6 cols\">\n                <TronLinkInfo />\n              </div>              \n              \n            </div>            \n          </div>\n        </div>  \n      </section>\n\n      <Oficina />   \n\n      <Datos />    \n\n      </>\n    );\n\n  }\n}\nexport default App;\n\n// {tWeb()}\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\n\nvar root = document.getElementById(\"root\");\n\n\nReactDOM.render(<App />, root);\n\n\n\n\n\n\n\n","module.exports = __webpack_public_path__ + \"static/media/TronLinkLogo.d3a8f115.png\";"],"sourceRoot":""}